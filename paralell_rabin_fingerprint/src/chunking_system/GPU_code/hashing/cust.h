#ifndef CUST_H
#define CUST_H
/*===========================================================================

                       CUSTOMIZATION

			TERMS OF USE AND LICENSE AGREEMENT

			
IMPORTANT! Access to use of StoreGPU Software is only granted on the condition 
that YOU agree to the terms and conditions set forth below.



PLEASE CAREFULLY READ ALL THE TERMS OF THIS AGREEMENT. IF YOU DO NOT AGREE TO 
THE TERMS OF THIS AGREEMENT, YOU ARE NOT AUTHORIZED TO USE THE StoreGPU SOFTWARE.

THE UNIVERSITY OF BRITISH COLUMBIA (UBC) grants YOU a personal, limited, 
non-exclusive, non-transferable, non-sublicensable right to use the StoreGPU 
Software solely for Research Use at YOUR academic Institution. Use of the 
StoreGPU Software is only authorized for YOU and those of YOUR employees, 
or agents over whom YOU have direct control and who agree to abide by the terms 
described here.


UBC retains title to all StoreGPU Software and improvements thereof.


As a condition of using the StoreGPU Software, YOU acknowledge and agree that 
UBC and the developers of the StoreGPU Software make no representations and 
extend no warranties of any kind, either express or implied. There are no 
express or implied warranties of fitness of the StoreGPU Software or information 
generated by the StoreGPU Software for a particular purpose, or that the use 
of the StoreGPU Software will not infringe any patent, copyright, trademark 
or other rights, or any other express or implied warranties.


Copyright (c) 2009, NetSysLab at the University of British Columbia

All rights reserved.

DESCRIPTION
  Configuration file.

===========================================================================*/


/*===========================================================================

                         PUBLIC DATA DECLARATIONS

===========================================================================*/


/* ------------------------------------------------------------------
** GENERAL FEATURES 
** ------------------------------------------------------------------ */

// Use shared memory implementation. Note that the total size of the test
// must not exceed 96MB. This will be debugged later on.
#define FEATURE_SHARED_MEMORY

// Use pinned memory pages.
#define FEATURE_PINNED_MODE

// Hash size returned is trimmed to save bandwidth in the copy back.
#define FEATURE_REDUCED_HASH_SIZE


/* ------------------------------------------------------------------
** CONSTANTS 
** ------------------------------------------------------------------ */
#ifdef FEATURE_REDUCED_HASH_SIZE
  #define MD5_HASH_SIZE    4
  #define SHA1_HASH_SIZE   4
#else
  #define MD5_HASH_SIZE    16
  #define SHA1_HASH_SIZE   20
#endif // FEATURE_REDUCED_HASH_SIZE

// Default value
/* The chunk size must be of the form (64*i - 12). 12 is reserved for padding.*/
#define DEFAULT_CHUNK_SIZE      (1024-12)
#define DEFAULT_WINDOW_SIZE     (52)
#define DEFAULT_OFFSET          (4)
#define MAX_THREADS_PER_BLOCK	(64)
//#define SHARED_MEMORY_SIZE      (4 * 1024 - 12)
#define SHARED_MEMORY_SIZE      (MAX_THREADS_PER_BLOCK * 16)


/* For reference */
/*  TOTAL_NUM_OF_THREADS = (THREADS_PER_BLOCK * BLOCKS_PER_GRID) */
/* OVERLAP_TEST   */
/*   Window size must be multiple of 4. */
/*   WINDOW_SIZE          (52, 20) */
/*   OFFSET		(4) */
/*   TEST_MEM_SIZE_OVERLAP = (TOTAL_NUM_OF_THREADS *  OFFSET + CHUNK_SIZE - OFFSET) */

/* DIRECT_TEST   */
/*   Currently chunk size must be of the form (64*i - 12). 12 is reserved for padding issues. */
/*   CHUNK_SIZE          (512-12, 1024-12) */
/*   TEST_MEM_SIZE       (CHUNK_SIZE * TOTAL_NUM_OF_THREADS) */


#endif /* CUST_H */
